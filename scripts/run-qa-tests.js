#!/usr/bin/env node

/**
 * QA Testing Automation Script
 * 
 * Executes automated tests and generates QA report
 */

import { execSync } from 'child_process';
import { writeFileSync } from 'fs';
import { join } from 'path';

const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  cyan: '\x1b[36m',
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function exec(command) {
  try {
    return execSync(command, { encoding: 'utf-8', stdio: 'pipe' });
  } catch (error) {
    return error.stdout || error.stderr || '';
  }
}

log('\nüß™ Running QA Tests...', colors.cyan);
log('='.repeat(70), colors.cyan);

// Run E2E tests
log('\nüìã Phase 1: E2E Tests', colors.cyan);
const e2eOutput = exec('npm run test:run -- src/test/e2e/');
const e2eMatch = e2eOutput.match(/Tests\s+(\d+)\s+failed.*?(\d+)\s+passed\s+\((\d+)\)/);
const e2eFailed = e2eMatch ? parseInt(e2eMatch[1]) : 0;
const e2ePassed = e2eMatch ? parseInt(e2eMatch[2]) : 0;
const e2eTotal = e2eMatch ? parseInt(e2eMatch[3]) : 0;

log(`  E2E Tests: ${e2ePassed}/${e2eTotal} passing (${((e2ePassed/e2eTotal)*100).toFixed(1)}%)`, 
    e2ePassed === e2eTotal ? colors.green : colors.yellow);

// Run unit tests
log('\nüìã Phase 2: Unit Tests', colors.cyan);
const unitOutput = exec('npm run test:run -- src/services/__tests__/');
const unitMatch = unitOutput.match(/Tests\s+(\d+)\s+failed.*?(\d+)\s+passed\s+\((\d+)\)/);
const unitFailed = unitMatch ? parseInt(unitMatch[1]) : 0;
const unitPassed = unitMatch ? parseInt(unitMatch[2]) : 0;
const unitTotal = unitMatch ? parseInt(unitMatch[3]) : 0;

log(`  Unit Tests: ${unitPassed}/${unitTotal} passing (${((unitPassed/unitTotal)*100).toFixed(1)}%)`,
    unitPassed === unitTotal ? colors.green : colors.yellow);

// Check TypeScript errors
log('\nüìã Phase 3: TypeScript Check', colors.cyan);
const tsOutput = exec('npm run check 2>&1');
const tsErrors = (tsOutput.match(/error TS\d+:/g) || []).length;

log(`  TypeScript Errors: ${tsErrors}`, tsErrors === 0 ? colors.green : colors.red);

// Check build
log('\nüìã Phase 4: Production Build', colors.cyan);
try {
  exec('npm run build');
  log('  Build: ‚úÖ Success', colors.green);
} catch (error) {
  log('  Build: ‚ùå Failed', colors.red);
}

// Generate report
const report = `# QA Test Report

**Date**: ${new Date().toLocaleString()}

## Test Results Summary

| Category | Passed | Failed | Total | Success Rate |
|----------|--------|--------|-------|--------------|
| E2E Tests | ${e2ePassed} | ${e2eFailed} | ${e2eTotal} | ${((e2ePassed/e2eTotal)*100).toFixed(1)}% |
| Unit Tests | ${unitPassed} | ${unitFailed} | ${unitTotal} | ${((unitPassed/unitTotal)*100).toFixed(1)}% |
| TypeScript | ${tsErrors === 0 ? '‚úÖ' : '‚ùå'} | - | ${tsErrors} errors | ${tsErrors === 0 ? '100%' : '0%'} |
| Build | ${tsErrors === 0 ? '‚úÖ' : '‚ùå'} | - | - | - |

## Overall Status

**Total Tests**: ${e2eTotal + unitTotal}
**Passing**: ${e2ePassed + unitPassed}
**Failing**: ${e2eFailed + unitFailed}
**Success Rate**: ${(((e2ePassed + unitPassed)/(e2eTotal + unitTotal))*100).toFixed(1)}%

## Recommendations

${e2eFailed > 0 ? `- ‚ö†Ô∏è  Fix ${e2eFailed} failing E2E tests\n` : ''}${unitFailed > 0 ? `- ‚ö†Ô∏è  Fix ${unitFailed} failing unit tests\n` : ''}${tsErrors > 0 ? `- ‚ö†Ô∏è  Fix ${tsErrors} TypeScript errors\n` : ''}${e2eFailed === 0 && unitFailed === 0 && tsErrors === 0 ? '- ‚úÖ All tests passing! Ready for production.\n' : ''}

## Next Steps

1. Review failing tests
2. Fix TypeScript errors
3. Re-run QA tests
4. Deploy to production

---
Generated by QA Automation Script
`;

const reportPath = join(process.cwd(), 'QA_TEST_REPORT.md');
writeFileSync(reportPath, report);

log('\n' + '='.repeat(70), colors.cyan);
log('‚úÖ QA Tests Complete!', colors.green);
log(`üìÑ Report saved: ${reportPath}`, colors.cyan);
log('='.repeat(70), colors.cyan);
